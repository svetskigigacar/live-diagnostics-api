swagger: "2.0"
info:
  version: "1.0.0"
  title: Twitter search example
  description: Twitter search example
  termsOfService: http://apigee.com/about/terms
  contact:
    name: Apigee Volos
    url: https://github.com/apigee-127/volos
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: localhost
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
x-a127-services:
  cache:
    provider: volos-cache-apigee
    options:
      name: name
      ttl: 10000
      fallback: fallbackCache
  fallbackCache:
    provider: volos-cache-memory
    options:
      name: name
      ttl: 10000
  quota:
    provider: volos-quota-memory
    options:
      timeUnit: minute
      interval: 1
      allow: 2
  spikeArrest:
    provider: volos-spikearrest-memory
    options:
      timeUnit: minute
      allow: 10
  analytics:
    provider: volos-analytics-memory
    options:
      bufferSize: 100,
      flushInterval: 5,
      batchSize: 2,
      finalizeRecord:
        helper: helper
        function: finalizeRecord
  oauth2:
    provider: volos-oauth-redis
    options:
      refreshTokenLifetime: 10000
      encryptionKey: "This is the key to encrypt/decrypt stored credentials"
      validGrantTypes:
        - client_credentials
        - authorization_code
        - implicit_grant
        - password
      passwordCheck:
        helper: helper
        function: passwordCheck
      tokenPaths:
        authorize: /authorize
        token: /accesstoken
        invalidate: /invalidate
        refresh: /refresh
  cachedOauth:
    provider: volos-oauth-redis
    options:
      refreshTokenLifetime: 10000
      cache: cache
      encryptionKey: "This is the key to encrypt/decrypt stored credentials"
      validGrantTypes:
        - client_credentials
        - authorization_code
        - implicit_grant
        - password
      passwordCheck:
        helper: helper
        function: passwordCheck
      beforeCreateToken:
        helper: helper
        function: beforeCreateToken
      tokenPaths:
        authorize: /authorizeX
        token: /accesstokenX
        invalidate: /invalidateX
        refresh: /refreshX
  apiKeyHeader:
    provider: volos-oauth-redis
    options:
      encryptionKey: "This is the key to encrypt/decrypt stored credentials"
  apiKeyQuery:
    provider: volos-oauth-redis
    options:
      encryptionKey: "This is the key to encrypt/decrypt stored credentials"
  basic:
    provider: volos-oauth-redis
    options:
      encryptionKey: "This is the key to encrypt/decrypt stored credentials"
      passwordCheck:
        helper: helper
        function: passwordCheck
paths:
  /clean:
    x-swagger-router-controller: controller
    get:
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /cached:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        cache: {}
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /cachedWithKey:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        cache:
          key: /cached
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /cachedWithLowTtl:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        cache:
          ttl: 10
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /cachedWithfunctionKey:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        cache:
          key:
            helper: helper
            function: cacheId
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /quota:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        quota: {}
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /quotaWithKey:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        quota:
          key: /quota
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /quotaWithWeight:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        quota:
          weight: 2
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /quotaWithFunctionKey:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        quota:
          key:
            helper: helper
            function: quotaId
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /spikeArrest:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        spikeArrest: {}
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /spikeArrestWithKey:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        spikeArrest:
          key: spikeArrest
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /spikeArrestWithWeight:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        spikeArrest:
          key: spikeArrest
          weight: 2
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /spikeArrestWithFunctionKey:
    x-swagger-router-controller: controller
    get:
      x-a127-apply:
        spikeArrest:
          key:
            helper: helper
            function: spikeArrestId
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /secured:
    x-swagger-router-controller: controller
    get:
      x-a127-authorizations:
        oauth2: {}
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /securedScope2:
    x-swagger-router-controller: controller
    get:
      x-a127-authorizations:
        oauth2:
          scope: scope2
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /securedCache:
    x-swagger-router-controller: controller
    get:
      x-a127-authorizations:
        cachedOauth:
          scope: scope2
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /cachedPath:
    x-swagger-router-controller: controller
    x-a127-apply:
      cache: {}
    get:
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /quotaPath:
    x-swagger-router-controller: controller
    x-a127-apply:
      quota: {}
    get:
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /securedPath:
    x-swagger-router-controller: controller
    x-a127-authorizations:
      oauth2:
        scope: scope1
    get:
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /analyzedPath:
    x-swagger-router-controller: controller
    x-a127-apply:
      analytics: {}
    get:
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /swaggerSecured:
    x-swagger-router-controller: controller
    get:
      security:
        -
          oauth2: []
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /swaggerSecuredScope2:
    x-swagger-router-controller: controller
    get:
      security:
        -
          oauth2:
            - scope2
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /swaggerApiKeySecuredHeader:
    x-swagger-router-controller: controller
    get:
      security:
        -
          apiKeyHeader: []
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /swaggerApiKeySecuredQuery:
    x-swagger-router-controller: controller
    get:
      security:
        -
          apiKeyQuery: []
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
  /swaggerBasicAuth:
    x-swagger-router-controller: controller
    get:
      security:
        -
          basic: []
      operationId: run
      responses:
        default:
          description: default
          schema:
            type: string
securityDefinitions:
  oauth2:
    type: oauth2
    scopes:
      scope2: ignored
    flow: accessCode
    authorizationUrl: ignored
    tokenUrl: ignored
  apiKeyHeader:
    type: apiKey
    name: X-API-KEY
    in: header
  apiKeyQuery:
    type: apiKey
    name: apiKey
    in: query
  basic:
    type: basic
